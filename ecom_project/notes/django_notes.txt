Django setup  (after env configuration):
1. activate virtual/conda env
2. Go to the desired directory
3. run: django-admin startproject project_name
4. cd into project folder
5. run : python manage.py runserver

Model View Template pattern

6. Connect urls to views
7. Templates : Create a folder template

Static files :
python manage.py collectstatic

Working with apps :
8. python manage.py startapp app_name
9. settings.py add the app in INSTALLED_APPS
10. include new app url in project urls.py
11. connect new app url with its views.py file
12. Create a template to render app reponses

Link project template to app named path
13. In new app urls file create a variable app_name = 'app_users'
14. In project template 'app_users:user_list'

Models -> Interact with Databases to interact with dynamic data
(Within the app you want to use to manage this type of object)
15. models.py : We should create a class which attributes will be stored as columns in our databases
16. Excecute migrations : python manage.py makemigrations

Admin panel :
17. python manage.py createsuperuser
18. Go to "http://127.0.0.1:8000/admin"
19. Register apps you'd like to manage from you app / admin

Connect app with db:
20. our_app views.py clas.object.all()

We will add functionalities by creating apps :
21. python manage.py startapp app_category, app_users, app_products ..
21.1 settings.py add app
22. Within our new app , create a Model / register in new_app/admin.py
22.1 python manage.py migrate , python manage.py makemigrations

-- fix --
In Django, the verbose_name attribute is used to specify the human-readable name for a model field or model itself.
The verbose_name_plural attribute is similar, but specifies the name to use for the model in the plural form.
These attributes are important because they allow you to specify more descriptive and user-friendly names for your models and fields
(That's why in our apps where we use "Class" to refer to the model, we need to set this properties in readable value)
Migrate and make migrations after that

Users and Logins:
built-in authentication and authorization system
Django's user management features allow you to easily create user accounts, handle password resets, and track user activity
(But its requieres user name, we want email.. lets change it)
23: Create a new_app (app_accounts)
23.1 : settings.py add app

The date_joined field in Django's AbstractBaseUser model is used to store the date and time that the user account was created. This can be useful for tracking user activity and analyzing user behavior.
The last_login field is used to store the date and time of the user's most recent login. This can be useful for tracking user activity and identifying inactive users.
The is_admin, is_staff, and is_superuser fields are used to indicate the user's level of access and permissions.
The is_admin field is typically used to designate users who have administrative access to the site
The is_staff field is used to designate users who have access to the site's backend but not necessarily full administrative access.
The is_superuser field is used to designate users who have full administrative access to the site.
The is_active field is used to indicate whether the user account is active or inactive.

23.2 After creating this app we need to define AUTH_USER_MODEL in settings.py

User admin panel:
24. app_accounts admin.py show nicer format (horizontal and linked)

Auto generate slug for category :
25. app_category admin.py

How to manage many products?
26. we will create a new app to do this -> app_product

Dynamic products in page :
27. 
